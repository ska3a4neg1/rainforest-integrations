{"name":"Rainforest-integrations","tagline":"Integrations for Rainforest - feel free to fork and make a pull request if there is something you'd love","body":"# Rainforest Integrations\r\n\r\nThis is a small web service for outbound integrations from\r\nRainforest.\r\n\r\n## API\r\n`POST /events`\r\nRainforest will post events to this endpoint (see below for details\r\nand the format).\r\n\r\n`GET /integrations/:key`\r\nReturn the schema of settings for a particular integration (see below\r\nfor the format).\r\n\r\n`GET /integrations`\r\nReturn a list of schemas for all supported integrations.\r\n\r\n### General flow\r\nRainforest will check the API endpoint for the required settings keys\r\nfor each integration. Every event will be posted to the `events`\r\nendpoint (Rainforest will determine which events to post based on user\r\npreferences). The payload for the `events` post should contain all the\r\ninformation necessary to complete integration event, including all\r\nauthentication and user settings.\r\n\r\n### `POST /events`\r\n#### Request payload\r\nEach post to `events` should include a JSON object in the request body\r\nwith the following keys:\r\n\r\n- `event_name`: The event name key (see below for more details).\r\n- `integrations`: A list of integrations to post the event to. Each\r\n  integration object should have 2 keys: `key`, which is the key name\r\n  of the integration (e.g. `\"slack\"`), and `settings`, which is an\r\n  object with integration-specific settings (including all\r\n  authentication settings).\r\n- `payload`: The appropriate event data (event-specific, see below for\r\n  the payload types for each event).\r\n\r\n#### Response\r\n`POST /events` will return a 201 response on success with a\r\n`{\"status\": \"ok\"}` object. On failure due to a bad request, it will\r\nreturn a 400 response and an object with two keys:\r\n\r\n- `error`: A description of the error that that occurred.\r\n- `type`: The type of failure (currently one of `invalid_request`,\r\n  `unsupported_integration`, or `misconfigured_integration`).\r\n\r\n### `GET /integrations`\r\n#### Response\r\n`GET /integrations` will return a list of schemas for all supported\r\nintegrations, each of which has the following keys:\r\n\r\n- `key`: The unique key of the integration (e.g. `\"slack\"`).\r\n- `title`: A human-readable title for the integration name\r\n  (e.g. `\"Slack\"`).\r\n- `settings`: A list of possible settings for the integration. Each\r\n  setting has three keys: `key`, the key name for the setting;\r\n  `title`, a human-readable title for the setting; and `required`, a\r\n  boolean indicating whether the setting is required.\r\n\r\nThe response object for an individual integration follows the same\r\nformat.\r\n\r\n## Event payload\r\nEvents come with a payload that is specific to the event. The\r\nfollowing events are currently supported, with the corresponding keys\r\nin the payload:\r\n\r\n\r\n#### `run_completion`\r\n\r\n- **run**: id, status, description, time_to_finish\r\n\r\n- **frontend_url**:\r\n\r\n- **failed_tests**: name\r\n\r\n\r\n#### `run_error`\r\n\r\n- **run**: id, description, error_reason\r\n\r\n- **frontend_url**:\r\n\r\n\r\n#### `run_webhook_timeout`\r\n\r\n- **run**: id, description\r\n\r\n- **frontend_url**:\r\n\r\n\r\n#### `run_test_failure`\r\n\r\n- **run**: id, description\r\n\r\n- **frontend_url**:\r\n\r\n- **failed_test**: id, name\r\n\r\n\r\n\r\n\r\n## Adding integrations\r\nThere are two steps to adding a new integration:\r\n\r\n1. Add an integration class to the `lib/integrations` directory. This\r\n   should inherit from the `Integrations::Base` class. It needs to\r\n   overwrite the `send_event` method and define a `key` class method.\r\n   If the integration post is unsuccessful, you should raise one of\r\n   the following errors:\r\n\r\n   - `Integrations::UserConfigurationError` for user configuration\r\n   problems (such as invalid credentials);\r\n\r\n   - `Integrations::MisconfiguredIntegrationError` for non-user problems\r\n   in the integrations data from Rainforest;\r\n\r\n   - `Integrations::Error` for all other problems.\r\n\r\n2. Edit `data/integrations.yml` to add your integration (including the\r\n   appropriate values for `title` and `settings`).\r\n\r\n## Local setup\r\n\r\n1. Clone this repository\r\n2. `bundle install`\r\n3. You need to set the environment variable `INTEGRATION_SENTRY_DSN` (no default included due to the public nature of this project)\r\n4. `rails s`\r\n\r\n### For internal Rainforest developers\r\n\r\nThe main Rainforest app will try to call (by default, this is configurable) `http://integrations.dev` in development.\r\n\r\n1. Install Pow if you don't have it already: `curl get.pow.cx | sh`\r\n2. `ln -s ~/rainforest/rainforest-integration ~/.pow/integrations`\r\n\r\n\r\n## Contributing\r\n1. Fork it ( https://github.com/[my-github-username]/rainforest-integrations/fork )\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Generate this README by running `rake doc`\r\n4. Commit your changes (git commit -am 'Add some feature')\r\n5. Push to the branch (git push origin my-new-feature)\r\n6. Create a new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}